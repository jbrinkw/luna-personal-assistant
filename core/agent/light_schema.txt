ChefByte
Update tools
- CHEF_UPDATE_daily_plan: Modify entries in the daily meal plan. Args: user_input: Natural language request mentioning meals or notes to add, change or remove for particular days. Returns: Confirmation describing what updates were made to the plan.
- CHEF_UPDATE_inventory: Update the kitchen inventory. Args: user_input: Natural language description of inventory changes such as items added, removed or used. Returns: Confirmation text summarizing the updates that were applied.
- CHEF_UPDATE_saved_meals: Manage saved meals. Args: user_input: Natural language request describing which recipes to add, update or remove. Returns: Confirmation text detailing the changes made to the saved meals list.
- CHEF_UPDATE_shopping_list: Modify the shopping list. Args: user_input: Text describing items to add, remove or clear from the list. Returns: Confirmation describing the final state of the shopping list.
- CHEF_UPDATE_taste_profile: Adjust the saved taste profile. Args: user_request: Natural language instructions describing likes, dislikes or dietary changes. Returns: A confirmation message summarizing the profile updates.

Getter tools
- CHEF_GET_daily_notes_context: Get the meal plan for the upcoming week. Returns: A text summary of planned meals and notes for the next seven days.
- CHEF_GET_ingredients_info_context: Provide general information about ingredients. Returns: Tips such as purchase amounts or reference links for ingredients.
- CHEF_GET_instock_meals_context: Find meals that can be prepared with current inventory. Returns: Text listing of saved and new meals possible with ingredients on hand.
- CHEF_GET_inventory_context: Retrieve a summary of the current kitchen inventory. Returns: A plain text listing of items and amounts on hand.
- CHEF_GET_new_meal_ideas_context: List previously generated meal ideas. Returns: A newline-separated list of stored suggestions.
- CHEF_GET_saved_meals_context: List stored meals and recipes. Returns: Text summary of all meals saved by the user.
- CHEF_GET_shopping_list_context: Retrieve the current shopping list. Returns: Plain text list of ingredients and quantities to purchase.
- CHEF_GET_taste_profile_context: Get the saved taste profile. Returns: A description of likes, dislikes and dietary restrictions.

Actions tools
- CHEF_ACTION_run_meal_planner: Execute the multi-step meal planning workflow. Args: user_request: Instructions or questions about planning upcoming meals. Returns: The final plan text produced by the meal planner.
- CHEF_ACTION_run_meal_suggestion_generator: Generate meal suggestions from user criteria. Args: user_request: A prompt describing desired meals or ingredient limits. Returns: A formatted string of meal suggestion text.
- CHEF_ACTION_run_new_meal_ideator: Generate creative new meal ideas or recipes. Args: user_request: Prompt describing desired concept or inspiration. Returns: The generated recipe or idea text.

GeneralByte
Update tools

Getter tools
- GENERAL_GET_todo_list: Return items from a Home Assistant to-do list.

Actions tools
- GENERAL_ACTION_modify_todo_item: Create, update or delete a to-do list item.
- GENERAL_ACTION_send_phone_notification: Send a notification message to the configured phone via Home Assistant.

HomeAssistant
Update tools

Getter tools
- HA_GET_devices: Get list of all available Home Assistant devices and their current states. Returns devices with their entity IDs. Use the entity_id values with other tools.
- HA_GET_entity_status: Get status of a specific Home Assistant entity by entity ID. Use entity IDs like 'light.living_room' or 'switch.kitchen'. Use list_devices() first to see available entity IDs.

Actions tools
- HA_ACTION_turn_entity_off: Turn off a specific Home Assistant entity by entity ID. Use entity IDs like 'light.living_room' or 'switch.kitchen'. Use list_devices() first to see available entity IDs.
- HA_ACTION_turn_entity_on: Turn on a specific Home Assistant entity by entity ID. Use entity IDs like 'light.living_room' or 'switch.kitchen'. Use list_devices() first to see available entity IDs.

CoachByte
Update tools
- COACH_UPDATE_complete_planned_set: Complete the next planned set in the queue, with optional overrides. - If exercise is provided, complete the first planned set for that exercise. - If reps/load are provided, they override the planned values. - Records completion referencing planned_set_id (does not delete planned set).
- COACH_UPDATE_log_completed_set: Record an unplanned set completion (not part of today's plan).
- COACH_UPDATE_new_daily_plan: Create today's daily workout plan with a list of planned sets. Parameters: - items: List of dicts with keys: - exercise (str) - reps (int) - load (float) - order (int): 0 append, -1 prepend, or explicit order - rest (int, optional): seconds (0-600), default 60 Returns a success message.
- COACH_UPDATE_set_weekly_split_day: Replace the weekly split plan for a specific day. Each item requires: exercise (str), reps (int), load (float), order (int), rest (int optional), relative (bool optional).
- COACH_UPDATE_summary: Update today's workout summary text.

Getter tools
- COACH_GET_recent_history: Retrieve recent workout history for the last N days.
- COACH_GET_timer: Get current timer status and remaining time.
- COACH_GET_today_plan: Retrieve today's planned workout sets in order.
- COACH_GET_weekly_split: Retrieve weekly split plan. If day is provided, limit to that day.

Actions tools
- COACH_ACTION_set_timer: Set a rest/workout timer in minutes (1-180).
